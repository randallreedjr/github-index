class GithubIndex

  def initialize(base_dir = "~")
    @base_dir = base_dir
  end

  def generate_index
    write_header
    puts "Reading from #{@base_dir}"
    puts "<ul>"
    process_directory(@base_dir)
    puts "</ul>"
    write_footer
  end

  private
  def write_header
    header = <<-HTML
      <!doctype html>
      <html>
        <head><title>Github Index</title></head>
        <body>
          <h1>Git Repository Index</h1>
    HTML
    puts header
  end

  def process_directory(current_directory)
    #if directory has .git directory, 
    contents = Dir.entries(current_directory).slice(2..-1)
    path = Pathname.new(current_directory)
    if not contents.include?(".git")
      puts "<li>#{path.basename}"
      contents.each do |content|
        if File.directory?("#{current_directory}/#{content}/")
          puts "<ul>"
          process_directory("#{current_directory}/#{content}/")
          puts "</ul>"
        end
      end
    else
      remote = find_git_remote("#{current_directory}/.git/config")
      if remote.empty?
        puts "<li>#{path.basename}"
      else
        puts "<li><a href=\"#{remote}\">#{path.basename}</a>"
      end
      
    end
  end

  def write_footer
    footer = <<-HTML
      <h6>Generated by <a href="https://github.com/randallreedjr">github-index</a></h6>
      </body>
      </html>
    HTML
    puts footer
  end

  def find_git_remote(filename)
    remote = ""
    file = File.new(filename, "r")
    while (line = file.gets)
      if line.start_with?("[remote")
        remote = file.gets.gsub("url = git@github.com:", "https://github.com/")
        break
      end
    end
    file.close
    return remote
  end
end